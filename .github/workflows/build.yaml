name: Build Binaries

on:
  push:
    tags:
      - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Binaries
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Windows
            architecture: x64
            runs-on: windows-2019
            artifact-name: dig-win-x64
            runtime: win-x64
          - os: Linux
            architecture: x64
            runs-on: ubuntu-latest
            artifact-name: dig-linux-x64
            runtime: linux-x64
          - os: Linux-ARM
            architecture: ARM64
            runs-on: ubuntu-latest
            artifact-name: dig-linux-arm64
            runtime: linux-arm64

    steps:
      - name: Clean workspace
        uses: Chia-Network/actions/clean-workspace@main

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install .NET SDK 8.0
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Build Projects
        run: ${{ github.workspace }}\publish.ps1 ${{ matrix.runtime }}
        shell: pwsh

      - name: Signing dig.exe
        if: matrix.os == 'Windows'
        uses: ./.github/actions/signing-steps
        with:
          ARTIFACT_PATHS: ${{ github.workspace }}\publish\standalone\win-x64\dig.exe,${{ github.workspace }}\publish\standalone\win-x64\dig.server.exe
          SM_CLIENT_CERT_FILE_B64: ${{ secrets.SM_CLIENT_CERT_FILE_B64 }}
          SM_HOST: ${{ secrets.SM_HOST }}
          SM_API_KEY: ${{ secrets.SM_API_KEY }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
          SM_CODE_SIGNING_CERT_SHA1_HASH: ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}
                
      - name: Download and Bundle Server Coin Binary
        uses: ./.github/actions/download-server-coin
        with:
          runtime: ${{matrix.runtime}}
          path: publish/standalone/${{matrix.runtime}}
          GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      
      - name: Copy License
        run: |
          Copy-Item -Path "${env:GITHUB_WORKSPACE}\COPYING" -Destination "${env:GITHUB_WORKSPACE}\publish\standalone\${{matrix.runtime}}"
        shell: pwsh

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.artifact-name}}
          path: publish/standalone/${{matrix.runtime}}

  msi:
    name: Build ${{matrix.artifact-name}} deb
    runs-on: windows-2019
    needs:
      - build
    
    strategy:
      matrix:
        include:
          - artifact-name: dig-win-x64
            runtime: win-x64
    steps:
      - name: Clean workspace
        uses: Chia-Network/actions/clean-workspace@main

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.artifact-name}}
          path: publish/standalone/${{matrix.runtime}}

      - name: Copy server_coin.exe
        run: |
          $sourcePath = "publish/standalone/${{matrix.runtime}}/server_coin.exe"
          $destinationPath = "thirdparty"
          # Ensure the destination directory exists
          if (-not (Test-Path -Path $destinationPath -PathType Container)) {
              New-Item -ItemType Directory -Path $destinationPath
          }
          # Copy the file
          Copy-Item -Path $sourcePath -Destination $destinationPath
        shell: pwsh

      - name: Build MSI
        run: ${{ github.workspace }}\build-msi.ps1
        shell: pwsh

      - name: Signing MSI
        uses: ./.github/actions/signing-steps
        with:
          ARTIFACT_PATHS: ${{ github.workspace }}/publish/Distributed-Internet-Gateway-${{matrix.runtime}}.msi
          SM_CLIENT_CERT_FILE_B64: ${{ secrets.SM_CLIENT_CERT_FILE_B64 }}
          SM_HOST: ${{ secrets.SM_HOST }}
          SM_API_KEY: ${{ secrets.SM_API_KEY }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
          SM_CODE_SIGNING_CERT_SHA1_HASH: ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}

      - name: Upload Windows MSI Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.artifact-name}}-msi
          path: publish/Distributed-Internet-Gateway-${{matrix.runtime}}.msi
        
  debs:
    name: Build ${{matrix.artifact-name}} deb
    runs-on: ubuntu-latest
    needs:
      - build

    strategy:
      matrix:
        include:
          - artifact-name: dig-linux-x64
            runtime: linux-x64
            platform: amd64
            pkg-name: distributed-internet-gateway
            binary-name: dig
          - artifact-name: dig-linux-arm64
            runtime: linux-arm64
            platform: arm64
            pkg-name: distributed-internet-gateway
            binary-name: dig

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.artifact-name}}
          path: ${{matrix.artifact-name}}

      - name: Get tag name
        id: tag-name
        run: |
          echo "TAGNAME=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

      - name: Build .deb
        env:
          VERSION: ${{ steps.tag-name.outputs.TAGNAME }}
          PLATFORM: ${{ matrix.platform }}
          DPKG_DEB_COMPRESSOR: gzip  # Ensure gzip compression for the control tarball
        run: |
          pip install j2cli
          CLI_DEB_BASE="${{matrix.pkg-name}}_${{ steps.tag-name.outputs.TAGNAME }}-1_${PLATFORM}"
          mkdir -p "deb/$CLI_DEB_BASE/opt/${{matrix.pkg-name}}"
          mkdir -p "deb/$CLI_DEB_BASE/usr/bin"
          mkdir -p "deb/$CLI_DEB_BASE/etc/systemd/system"
          mkdir -p "deb/$CLI_DEB_BASE/DEBIAN"
          j2 -o "deb/$CLI_DEB_BASE/DEBIAN/control" build-scripts/deb/control.j2
          cp -r ${{matrix.artifact-name}}/* "deb/$CLI_DEB_BASE/opt/${{matrix.pkg-name}}/"
          cp build-scripts/deb/dig@.service "deb/$CLI_DEB_BASE/etc/systemd/system/dig@.service"
          ls -la "deb/$CLI_DEB_BASE/opt/${{matrix.pkg-name}}"
          chmod +x "deb/$CLI_DEB_BASE/opt/${{matrix.pkg-name}}/dig"
          chmod +x "deb/$CLI_DEB_BASE/opt/${{matrix.pkg-name}}/dig.server"
          ln -s "../../opt/${{matrix.pkg-name}}/dig.server" "deb/$CLI_DEB_BASE/usr/bin/dig.server"
          dpkg-deb --build --root-owner-group -Zgzip "deb/$CLI_DEB_BASE"

      - name: Upload deb
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-deb
          path: ${{ github.workspace }}/deb/*.deb

  publish_apt:
    runs-on: ubuntu-latest
    needs: [build, debs]
  
    steps:
      - uses: actions/checkout@v2
        name: Checkout code
  
      - name: Setup Aptly, AWS CLI, and GnuPG
        run: |
          sudo apt-get update
          sudo apt-get install -y aptly awscli gnupg
          aws configure set default.region us-east-1
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
          # Create a custom aptly.conf file
          echo '{
            "rootDir": "$HOME/.aptly",
            "downloadConcurrency": 4,
            "downloadSpeedLimit": 0,
            "architectures": [],
            "dependencyFollowSuggests": false,
            "dependencyFollowRecommends": false,
            "dependencyFollowAllVariants": false,
            "dependencyFollowSource": false,
            "gpgDisableSign": false,
            "gpgDisableVerify": false,
            "downloadSourcePackages": false,
            "ppaDistributorID": "ubuntu",
            "ppaCodename": "",
            "S3PublishEndpoints": {
              "dlaas": {
                "region": "us-east-1",
                "bucket": "dlaas",
                "endpoint": "s3.amazonaws.com",
                "accessKeyID": "${{ secrets.AWS_ACCESS_KEY_ID }}",
                "secretAccessKey": "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
              }
            }
          }' > $HOME/.aptly.conf
  
      - name: Import GPG Key
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --yes --pinentry-mode loopback --import
  
      - name: Sync Aptly Database from S3
        run: |
          aws s3 sync ${{ secrets.APTLY_S3_PATH }} ~/.aptly/ || echo "No existing Aptly database found in S3, proceeding without error."
  
      - name: Set Repository and Distribution Names
        run: |
          echo "REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2-)" >> $GITHUB_ENV
          echo "DISTRIBUTION=$(echo ${{ github.repository }} | cut -d'/' -f1)" >> $GITHUB_ENV
      
      - name: Create or Ignore Existing Aptly Repository
        run: |
          aptly repo create "${{ env.REPO_NAME }}" || true
  
      - name: Download Linux x64 Deb artifact
        uses: actions/download-artifact@v3
        with:
          name: dig-linux-x64-deb
          path: artifacts

      - name: Add .deb Packages to Repository
        run: |
          aptly repo add ${{ env.REPO_NAME }} artifacts/*.deb
  
      - name: Create Snapshot
        run: |
          SNAPSHOT_NAME="snapshot-$(date +%Y%m%d%H%M%S)"
          aptly snapshot create $SNAPSHOT_NAME from repo ${{ env.REPO_NAME }}
        shell: bash
      
      - name: Publish New Snapshot
        run: |
          aptly publish snapshot -distribution=${{ env.DISTRIBUTION }} -gpg-key="${{ secrets.GPG_KEY_ID }}" $SNAPSHOT_NAME dlaas:${{ env.REPO_NAME }}
        env:
          SNAPSHOT_NAME: ${{ needs.create-snapshot.outputs.SNAPSHOT_NAME }}
        shell: bash
        continue-on-error: true
      
      - name: Update Existing Publication
        if: ${{ failure() }}  # This step runs only if the previous step failed
        run: |
          aptly publish switch ${DISTRIBUTION} dlaas $SNAPSHOT_NAME
        env:
          SNAPSHOT_NAME: ${{ needs.create-snapshot.outputs.SNAPSHOT_NAME }}
        shell: bash
        continue-on-error: true
        
    ##  - name: Create GPG Public Key File
    #    run: |
    #      echo "${{ secrets.GPG_PUBLIC_KEY }}" | base64 --decode > repo-key.gpg
  
      - name: Upload GPG Public Key to S3
        run: |
          aws s3 cp repo-key.gpg s3://dlaas/releases/repo-key.gpg
  
      - name: Sync Updated Aptly Database to S3
        run: |
          aws s3 sync ~/.aptly/ ${{ secrets.APTLY_S3_PATH }}
  
      - name: Print Installation Instructions
        run: |
          echo "To install the package from the repository, run the following commands:"
          echo "1. Add the repository to your system:"
          echo "   echo 'deb [trusted=yes] http://cdn.datalayer.storage/releases/ubuntu/ ${DISTRIBUTION} main' | sudo tee /etc/apt/sources.list.d/${REPO_NAME}.list"
          echo ""
          echo "2. Import the GPG key (replace 'http://cdn.datalayer.storage/releases/repo-key.gpg' with the actual URL of your GPG key):"
          echo "   curl -s http://cdn.datalayer.storage/releases/repo-key.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/${REPO_NAME}-archive-keyring.gpg > /dev/null"
          echo ""
          echo "3. Update your package lists:"
          echo "   sudo apt-get update"
          echo ""
          echo "4. Install the package:"
          echo "   sudo apt-get install ${REPO_NAME}"
        env:
          DISTRIBUTION: ${{ env.DISTRIBUTION }}
          REPO_NAME: ${{ env.REPO_NAME }}
    
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
      - debs
      - msi

    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: dig-win-x64-msi
          path: dig-win-x64-msi

      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: dig-win-x64
          path: dig-win-x64

      - name: Download Linux x64 deb
        uses: actions/download-artifact@v3
        with:
          name: dig-linux-x64
          path: dig-linux-x64
        
      - name: Download Linux arm64 deb
        uses: actions/download-artifact@v3
        with:
          name: dig-linux-arm64
          path: dig-linux-arm64


      - name: Download Linux x64 Deb artifacts
        uses: actions/download-artifact@v3
        with:
          name: dig-linux-x64-deb
          path: dig-linux-x64-deb

      - name: Download Linux arm deb
        uses: actions/download-artifact@v3
        with:
          name: dig-linux-arm64-deb
          path: dig-linux-arm64-deb

      - name: Get tag name
        id: tag-name
        run: |
          echo "TAGNAME=$(echo $GITHUB_REF | cut -d / -f 3)" >>$GITHUB_OUTPUT
      
      - name: Create zips
        run: |
          zip -r dig-win-x64-${{ steps.tag-name.outputs.TAGNAME }}.zip dig-win-x64
          zip -r dig-linux-x64-${{ steps.tag-name.outputs.TAGNAME }}.zip dig-linux-x64
          zip -r dig-linux-arm64-${{ steps.tag-name.outputs.TAGNAME }}.zip dig-linux-arm64
          mv dig-win-x64-msi/Distributed-Internet-Gateway-win-x64.msi dig-win-x64-${{ steps.tag-name.outputs.TAGNAME }}.msi
          mv dig-linux-x64-deb/*.deb dig-linux-x64-${{ steps.tag-name.outputs.TAGNAME }}.deb
          mv dig-linux-arm64-deb/*.deb dig-linux-arm64-${{ steps.tag-name.outputs.TAGNAME }}.deb
        
      - name: Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          files: |
            dig-win-x64-${{ steps.tag-name.outputs.TAGNAME }}.zip
            dig-linux-x64-${{ steps.tag-name.outputs.TAGNAME }}.zip
            dig-linux-arm64-${{ steps.tag-name.outputs.TAGNAME }}.zip
            dig-win-x64-${{ steps.tag-name.outputs.TAGNAME }}.msi
            dig-linux-x64-${{ steps.tag-name.outputs.TAGNAME }}.deb
            dig-linux-arm64-${{ steps.tag-name.outputs.TAGNAME }}.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
