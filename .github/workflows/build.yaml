name: Build Binaries

on:
  push:
    tags:
      - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Binaries
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: Windows
            architecture: x64
            runs-on: windows-2019
            artifact-name: dig-win-x64
            runtime: win-x64
          - os: Linux
            architecture: x64
            runs-on: ubuntu-latest
            artifact-name: dig-linux-x64
            runtime: linux-x64
          - os: Linux-ARM
            architecture: ARM64
            runs-on: ubuntu-latest
            artifact-name: dig-linux-arm64
            runtime: linux-arm64
          - os: OSX
            architecture: x64
            runs-on: macos-latest
            artifact-name: dig-osx-x64
            runtime: osx-x64

    steps:
      - name: Clean workspace
        uses: Chia-Network/actions/clean-workspace@main

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install .NET SDK 8.0
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'

      - name: Build Projects
        run: ${{ github.workspace }}\publish.ps1 ${{ matrix.runtime }}
        shell: pwsh

      - name: Signing dig.exe
        if: matrix.os == 'Windows'
        uses: ./.github/actions/signing-steps
        with:
          ARTIFACT_PATHS: ${{ github.workspace }}\publish\standalone\win-x64\dig.exe,${{ github.workspace }}\publish\standalone\win-x64\dig.server.exe
          SM_CLIENT_CERT_FILE_B64: ${{ secrets.SM_CLIENT_CERT_FILE_B64 }}
          SM_HOST: ${{ secrets.SM_HOST }}
          SM_API_KEY: ${{ secrets.SM_API_KEY }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
          SM_CODE_SIGNING_CERT_SHA1_HASH: ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}
                
      - name: Download and Bundle Server Coin Binary
        uses: ./.github/actions/download-server-coin
        with:
          runtime: ${{matrix.runtime}}
          path: publish/standalone/${{matrix.runtime}}
          GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      
      - name: Copy License
        run: |
          Copy-Item -Path "${env:GITHUB_WORKSPACE}\COPYING" -Destination "${env:GITHUB_WORKSPACE}\publish\standalone\${{matrix.runtime}}"
        shell: pwsh

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.artifact-name}}
          path: publish/standalone/${{matrix.runtime}}

  dmg:
    name: Package DMG
    runs-on: macos-latest
    needs: build

    strategy:
      matrix:
        include:
          - artifact-name: dig-osx-x64
            runtime: osx-x64

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download OSX Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.artifact-name}}
          path: ${{matrix.artifact-name}}
      
      - name: Import Apple installer signing certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEV_ID_APP }}
          p12-password: ${{ secrets.APPLE_DEV_ID_APP_PASS }}

      - name: Install DMG Packaging Tool
        run: brew install create-dmg

      - name: list files
        run: ls -la ./${{matrix.artifact-name}}

      - name: Package Files into DMG
        run: |
          create-dmg \
          --volname "Application Installer" \
          --window-pos "200 120" \
          --window-size "800 400" \
          --icon-size 100 \
          --icon "Application.app 200 190" \
          --hide-extension "Application.app" \
          --app-drop-link "600 185" \
          "${{ github.workspace }}/${{matrix.artifact-name}}.dmg" \
          "${{ github.workspace }}/${{matrix.artifact-name}}/"

      - name: Find DMG file
        id: find-dmg
        run: |
          DMG_FILE=$(find ${{ github.workspace }}/${{matrix.artifact-name}} -type f -name '*.dmg')
          echo "DMG_FILE=$DMG_FILE" >> $GITHUB_ENV
          echo "Found DMG file: $DMG_FILE"

      - name: Notarize with notary-tools action
        uses: GuillaumeFalourd/notary-tools@v1
        with:
          product_path: ${{ env.DMG_FILE }}
          apple_id: ${{ secrets.APPLE_NOTARIZE_USERNAME }}
          password: ${{ secrets.APPLE_NOTARIZE_PASSWORD }}
          team_id: ${{ secrets.APPLE_TEAM_ID }}
          staple: 'true'
          keychain_profile: ${{ secrets.APPLE_NOTARIZE_PASSWORD }}

      - name: Upload DMG
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.artifact-name}}-dmg
          path: ${{matrix.artifact-name}}.dmg

  msi:
    name: Build ${{matrix.artifact-name}} deb
    runs-on: windows-2019
    needs:
      - build
    
    strategy:
      matrix:
        include:
          - artifact-name: dig-win-x64
            runtime: win-x64
    steps:
      - name: Clean workspace
        uses: Chia-Network/actions/clean-workspace@main

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.artifact-name}}
          path: publish/standalone/${{matrix.runtime}}

      - name: Copy server_coin.exe
        run: |
          $sourcePath = "publish/standalone/${{matrix.runtime}}/server_coin.exe"
          $destinationPath = "thirdparty"
          # Ensure the destination directory exists
          if (-not (Test-Path -Path $destinationPath -PathType Container)) {
              New-Item -ItemType Directory -Path $destinationPath
          }
          # Copy the file
          Copy-Item -Path $sourcePath -Destination $destinationPath
        shell: pwsh

      - name: Build MSI
        run: ${{ github.workspace }}\build-msi.ps1
        shell: pwsh

      - name: Signing MSI
        uses: ./.github/actions/signing-steps
        with:
          ARTIFACT_PATHS: ${{ github.workspace }}/publish/Distributed-Internet-Gateway-${{matrix.runtime}}.msi
          SM_CLIENT_CERT_FILE_B64: ${{ secrets.SM_CLIENT_CERT_FILE_B64 }}
          SM_HOST: ${{ secrets.SM_HOST }}
          SM_API_KEY: ${{ secrets.SM_API_KEY }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
          SM_CODE_SIGNING_CERT_SHA1_HASH: ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}

      - name: Upload Windows MSI Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.artifact-name}}-msi
          path: publish/Distributed-Internet-Gateway-${{matrix.runtime}}.msi
        
  debs:
    name: Build ${{matrix.artifact-name}} deb
    runs-on: ubuntu-latest
    needs:
      - build

    strategy:
      matrix:
        include:
          - artifact-name: dig-linux-x64
            runtime: linux-x64
            platform: amd64
            pkg-name: distributed-internet-gateway
            binary-name: dig
          - artifact-name: dig-linux-arm64
            runtime: linux-arm64
            platform: arm64
            pkg-name: distributed-internet-gateway
            binary-name: dig

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.artifact-name}}
          path: ${{matrix.artifact-name}}

      - name: Get tag name
        id: tag-name
        run: |
          echo "TAGNAME=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

      - name: Build .deb
        env:
          VERSION: ${{ steps.tag-name.outputs.TAGNAME }}
          PLATFORM: ${{ matrix.platform }}
        run: |
          pip install j2cli
          CLI_DEB_BASE="${{matrix.pkg-name}}_${{ steps.tag-name.outputs.TAGNAME }}-1_${PLATFORM}"
          mkdir -p "deb/$CLI_DEB_BASE/opt/${{matrix.pkg-name}}"
          mkdir -p "deb/$CLI_DEB_BASE/usr/bin"
          mkdir -p "deb/$CLI_DEB_BASE/etc/systemd/system"
          mkdir -p "deb/$CLI_DEB_BASE/DEBIAN"
          j2 -o "deb/$CLI_DEB_BASE/DEBIAN/control" build-scripts/deb/control.j2
          cp -r ${{matrix.artifact-name}}/* "deb/$CLI_DEB_BASE/opt/${{matrix.pkg-name}}/"
          cp build-scripts/deb/dig@.service deb/$CLI_DEB_BASE/etc/systemd/system/dig@.service
          ls -la deb/$CLI_DEB_BASE/opt/${{matrix.pkg-name}}
          chmod +x deb/$CLI_DEB_BASE/opt/${{matrix.pkg-name}}/dig.node
          chmod +x deb/$CLI_DEB_BASE/opt/${{matrix.pkg-name}}/dig.server
          ln -s ../../opt/${{matrix.pkg-name}}/dig.node "deb/$CLI_DEB_BASE/usr/bin/dig.node"
          dpkg-deb --build --root-owner-group "deb/$CLI_DEB_BASE"

      - name: Upload deb
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-deb
          path: ${{ github.workspace }}/deb/*.deb

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
      - debs
      - msi

    steps:
      - name: Download OSX DMG artifacts
        uses: actions/download-artifact@v3
        with:
          name: dig-osx-x64-dmg
          path: dig-osx-x64-dmg

      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: dig-win-x64-msi
          path: dig-win-x64-msi

      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: dig-win-x64
          path: dig-win-x64

      - name: Download OSX artifacts
        uses: actions/download-artifact@v3
        with:
          name: dig-osx-x64
          path: dig-osx-x64
  
      - name: Download Linux x64 deb
        uses: actions/download-artifact@v3
        with:
          name: dig-linux-x64
          path: dig-linux-x64
        
      - name: Download Linux arm64 deb
        uses: actions/download-artifact@v3
        with:
          name: dig-linux-arm64
          path: dig-linux-arm64


      - name: Download Linux x64 Deb artifacts
        uses: actions/download-artifact@v3
        with:
          name: dig-linux-x64-deb
          path: dig-linux-x64-deb

      - name: Download Linux arm deb
        uses: actions/download-artifact@v3
        with:
          name: dig-linux-arm64-deb
          path: dig-linux-arm64-deb

      - name: Get tag name
        id: tag-name
        run: |
          echo "TAGNAME=$(echo $GITHUB_REF | cut -d / -f 3)" >>$GITHUB_OUTPUT
      
      - name: Create zips
        run: |
          zip -r dig-osx-x64-${{ steps.tag-name.outputs.TAGNAME }}.zip dig-osx-x64
          zip -r dig-win-x64-${{ steps.tag-name.outputs.TAGNAME }}.zip dig-win-x64
          zip -r dig-linux-x64-${{ steps.tag-name.outputs.TAGNAME }}.zip dig-linux-x64
          zip -r dig-linux-arm64-${{ steps.tag-name.outputs.TAGNAME }}.zip dig-linux-arm64
          mv dig-win-x64-msi/Distributed-Internet-Gateway-win-x64.msi dig-win-x64-${{ steps.tag-name.outputs.TAGNAME }}.msi
          mv dig-linux-x64-deb/*.deb dig-linux-x64-${{ steps.tag-name.outputs.TAGNAME }}.deb
          mv dig-linux-arm64-deb/*.deb dig-linux-arm64-${{ steps.tag-name.outputs.TAGNAME }}.deb
          mv dig-osx-x64-dmg/dig-osx-x64.dmg dig-osx-x64-${{ steps.tag-name.outputs.TAGNAME }}.dmg
        
      - name: Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          files: |
            dig-osx-x64-${{ steps.tag-name.outputs.TAGNAME }}.zip
            dig-win-x64-${{ steps.tag-name.outputs.TAGNAME }}.zip
            dig-linux-x64-${{ steps.tag-name.outputs.TAGNAME }}.zip
            dig-linux-arm64-${{ steps.tag-name.outputs.TAGNAME }}.zip
            dig-win-x64-${{ steps.tag-name.outputs.TAGNAME }}.msi
            dig-linux-x64-${{ steps.tag-name.outputs.TAGNAME }}.deb
            dig-linux-arm64-${{ steps.tag-name.outputs.TAGNAME }}.deb
            dig-osx-x64-${{ steps.tag-name.outputs.TAGNAME }}.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
