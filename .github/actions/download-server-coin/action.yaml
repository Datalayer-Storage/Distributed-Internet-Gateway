name: Download Server Coin
description: Download Server Coin
inputs:
  path:
    required: true
    description: Path to the artifact to sign
  runtime:
    required: true
    description: Runtime to download for

runs:
  using: 'composite'
  steps:
    - name: Download server_coin assets from the latest release and rename
      run: |
        # Fetch the latest release data from GitHub API
        $headers = @{
          "Authorization" = "token $env:GH_PAT"
        }
        $latestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/Datalayer-Storage/chia-server-coin-cli/releases/latest" -Headers $headers
        $tagName = $latestRelease.tag_name

        # Define asset filenames based on the tag name
        $fileNames = @("server_coin-${{inputs.runtime}}-$tagName.zip")

        # Loop through each filename to download and rename
        foreach ($fileName in $fileNames) {
          # Find the asset download URL
          $asset = $latestRelease.assets | Where-Object {$_.name -eq $fileName}
          if ($null -eq $asset) {
            Write-Warning "Asset URL for $fileName not found"
            continue
          }

          # Download the asset
          $downloadPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath $asset.name
          Invoke-WebRequest -Uri $asset.browser_download_url -Headers $headers -OutFile $downloadPath

          # Rename the file to strip out the tag name
          $newName = $asset.name.Replace("-$tagName", "")
          $newPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath $newName
          Rename-Item -Path $downloadPath -NewName $newPath
        }
      shell: pwsh
      env:
        GH_PAT: ${{ secrets.GH_ACCESS_TOKEN }}

    - name: Unzip downloaded assets
      run: |
        # Define the paths for the zip files and their destination directories
        $zipFiles = @{
          "server_coin-${{inputs.runtime}}.zip" = "${{inputs.path}}";
        }
    
        # Iterate through each zip file and extract it to the specified destination
        foreach ($zipFile in $zipFiles.GetEnumerator()) {
          $zipPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath $zipFile.Name
          $destPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath $zipFile.Value
    
          # Check if the zip file exists before attempting to extract
          if (Test-Path $zipPath) {
            # Create the destination directory if it doesn't exist
            if (-not (Test-Path $destPath)) {
              New-Item -ItemType Directory -Path $destPath | Out-Null
            }
    
            # Extract the zip file to a temporary location
            $tempPath = Join-Path -Path $env:TEMP -ChildPath ([System.IO.Path]::GetRandomFileName())
            Expand-Archive -Path $zipPath -DestinationPath $tempPath -Force
    
            # Move the contents from the temporary location to the final destination
            Get-ChildItem -Path $tempPath | Move-Item -Destination $destPath
            Remove-Item -Path $tempPath -Recurse -Force
          }
          else {
            Write-Warning "Zip file $zipFile.Name does not exist and cannot be unzipped."
          }
        }
      shell: pwsh