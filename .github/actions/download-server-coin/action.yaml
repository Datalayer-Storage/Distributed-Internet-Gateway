name: Download Server Coin
description: Download Server Coin
inputs:
  path:
    required: true
    description: Path to the artifact to sign
  runtime:
    required: true
    description: Runtime to download for
  GH_ACCESS_TOKEN:
    required: true
    description: GitHub Personal Access Token

runs:
  using: 'composite'
  steps:
    - name: Download server_coin assets from the latest release and rename
      run: |
        # Fetch the latest release data from GitHub API
        $headers = @{
          "Authorization" = "token $env:GH_PAT"
        }
        $latestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/Datalayer-Storage/chia-server-coin-cli/releases/latest" -Headers $headers
        $tagName = $latestRelease.tag_name

        # Define the asset filename based on the tag name
        $fileName = "server_coin-${{ inputs.runtime }}-$tagName.zip"

        # Find the asset download URL
        $asset = $latestRelease.assets | Where-Object { $_.name -eq $fileName }
        if ($null -eq $asset) {
          Write-Warning "Asset URL for $fileName not found"
        } else {
          # Download the asset
          $downloadPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath $asset.name
          Invoke-WebRequest -Uri $asset.browser_download_url -Headers $headers -OutFile $downloadPath

          # Rename the file to strip out the tag name
          $newName = $asset.name.Replace("-$tagName", "")
          $newPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath $newName
          Rename-Item -Path $downloadPath -NewName $newPath
        }

      shell: pwsh
      env:
        GH_PAT: ${{ inputs.GH_ACCESS_TOKEN }}

    - name: Unzip downloaded assets
      run: |
        # Define the zip file path and its destination directory
        $zipFileName = "server_coin-${{ inputs.runtime }}.zip"
        $zipPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath $zipFileName
        $destPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "publish/standalone/${{ inputs.runtime }}"

        # Check if the zip file exists before attempting to extract
        if (Test-Path $zipPath) {
          # Create the destination directory if it doesn't exist
          if (-not (Test-Path $destPath)) {
            New-Item -ItemType Directory -Path $destPath | Out-Null
          }

          # Extract the zip file to the destination directory
          Expand-Archive -Path $zipPath -DestinationPath $destPath -Force
        } else {
          Write-Warning "Zip file $zipFileName does not exist and cannot be unzipped."
        }
      shell: pwsh